http://www.getlaura.com/testing-unit-vs-integration-vs-regression-vs-acceptance/

TESTING: UNIT VS INTEGRATION VS REGRESSION VS ACCEPTANCE

Generally:

Unit – You test each individual piece of code. Think each class or method.
Integration – You test the integrations of many units together. You make sure your code works when put together, including dependencies, databases and libraries.
Regression – After integrating (and maybe fixing) you should run your unit tests again. This is regression testing to ensure that further changes have not broken any units that were already tested. You can run your unit tests again and again for regression testing.
Acceptance – You should test that the program works the way a user/customer expects the application to work. Acceptance tests ensure that the functionality meets business requirements.


https://stackoverflow.com/questions/520064/what-is-unit-test-integration-test-smoke-test-regression-test

Unit test: Specify and test one point of the contract of single method of a class. This should have a very narrow and well defined scope. Complex dependencies and interactions to the outside world are stubbed or mocked.
Integration test: Test the correct inter-operation of multiple subsystems. There is whole spectrum there, from testing integration between two classes, to testing integration with the production environment.
Smoke test (aka Sanity check): A simple integration test where we just check that when the system under test is invoked it returns normally and does not blow up. It is an analogy with electronics, where the first test occurs when powering up a circuit: if it smokes, it's bad.
Regression test: A test that was written when a bug was fixed. It ensures that this specific bug will not occur again. The full name is "non-regression test". It can also be a test made prior to changing an application to make sure the application provides the same outcome.
To this, I will add:

Acceptance test: Test that a feature or use case is correctly implemented. It is similar to an integration test, but with a focus on the use case to provide rather than on the components involved.
System test: Test that tests a system as a black box. Dependencies on other systems are often mocked or stubbed during the test (otherwise it would be more of an integration test).
Pre-flight check: Tests that are repeated in a production-like environment, to alleviate the 'builds on my machine' syndrome. Often this is realized by doing an acceptance or smoke test in a production like environment





Unit test: an automatic test to test the internal workings of a class. It should be a stand-alone test which is not related to other resources.
Integration test: an automatic test that is done on an environment, so similar to unit tests but with external resources (db, disk access)
Regression test: after implementing new features or bug fixes, you re-test scenarios which worked in the past. Here you cover the possibility in which your new features break existing features.
Smoke testing: first tests on which testers can conclude if they will continue testing.
Canary test is an automated, non-destructive test that is run on a regular basis in a LIVE environment, such that if it ever fails, something really bad has happened.




[trunk continuous integration]

https://trunkbaseddevelopment.com/continuous-integration/
https://victorops.com/blog/trunk-based-development-and-ci-cd
https://cloud.google.com/solutions/devops/devops-tech-trunk-based-development?hl=de
https://www.thoughtworks.com/de/insights/blog/enabling-trunk-based-development-deployment-pipelines
https://www.toptal.com/software/trunk-based-development-git-flow
https://paulhammant.com/2013/04/05/what-is-trunk-based-development/

[git submodule]

https://git-scm.com/book/de/v2/Git-Tools-Submodule
https://git-scm.com/docs/git-submodule

[git pull request build]

https://plugins.jenkins.io/ghprb/
https://github.com/jenkinsci/ghprb-plugin
https://github.com/janinko/ghprb
https://devopscube.com/jenkins-build-trigger-github-pull-request/
https://docs.cloudbees.com/docs/admin-resources/latest/plugins/pull-request-builder-for-github

[tools]

https://www.jenkins.io/doc/pipeline/examples/
https://www.jenkins.io/doc/pipeline/steps/workflow-cps/
https://www.jenkins.io/doc/book/pipeline/syntax/
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/
https://docs.sonarqube.org/latest/analysis/jenkins/
https://plugins.jenkins.io/sonar/
https://www.jenkins.io/doc/pipeline/steps/sonar/
https://lgtm.com/
https://www.drools.org/learn/documentation.html
https://docs.jboss.org/drools/release/7.1.0.Final/drools-docs/html_single/
https://www.synopsys.com/blogs/software-security/installing-black-duck-hub/
https://www.blackducksoftware.com/
http://docs.fitnesse.org/FrontPage
http://www.fitnesse.org/FitNesse.UserGuide.TwoMinuteExample
