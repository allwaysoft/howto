
https://docs.docker.com/engine/reference/commandline/ps/#filtering
https://docs.docker.com/engine/reference/commandline/build/
https://docs.docker.com/engine/reference/commandline/image_build/
https://docs.docker.com/engine/reference/commandline/cli/
https://docs.docker.com/engine/reference/builder/
https://docs.docker.com/engine/reference/commandline/images/
https://docs.docker.com/engine/reference/commandline/docker/
https://github.com/wsargent/docker-cheat-sheet


Commands:
    attach    Attach to a running container
    build     Build an image from a Dockerfile
    commit    Create a new image from a container's changes
    cp        Copy files/folders between a container and the local filesystem
    create    Create a new container
    diff      Inspect changes on a container's filesystem
    events    Get real time events from the server
    exec      Run a command in a running container
    export    Export a container's filesystem as a tar archive
    history   Show the history of an image
    images    List images
    import    Import the contents from a tarball to create a filesystem image
    info      Display system-wide information
    inspect   Return low-level information on a container, image or task
    kill      Kill one or more running containers
    load      Load an image from a tar archive or STDIN
    login     Log in to a Docker registry.
    logout    Log out from a Docker registry.
    logs      Fetch the logs of a container
    network   Manage Docker networks
    node      Manage Docker Swarm nodes
    pause     Pause all processes within one or more containers
    port      List port mappings or a specific mapping for the container
    ps        List containers
    pull      Pull an image or a repository from a registry
    push      Push an image or a repository to a registry
    rename    Rename a container
    restart   Restart a container
    rm        Remove one or more containers
    rmi       Remove one or more images
    run       Run a command in a new container
    save      Save one or more images to a tar archive (streamed to STDOUT by default)
    search    Search the Docker Hub for images
    service   Manage Docker services
    start     Start one or more stopped containers
    stats     Display a live stream of container(s) resource usage statistics
    stop      Stop one or more running containers
    swarm     Manage Docker Swarm
    tag       Tag an image into a repository
    top       Display the running processes of a container
    unpause   Unpause all processes within one or more containers
    update    Update configuration of one or more containers
    version   Show the Docker version information
    volume    Manage Docker volumes
    wait      Block until a container stops, then print its exit code





sudo docker ps

#sudo docker ps --no-trunc
#sudo docker ps -a
#sudo docker ps --filter "label=color"
#sudo docker ps --filter "label=color=blue"
#sudo docker ps -a --filter 'exited=0'
#docker ps -a --filter 'exited=137'
#docker ps --filter status=running
#docker ps --filter ancestor=ubuntu

CONTAINER ID        IMAGE                        COMMAND                CREATED             STATUS              PORTS                                              NAMES
9eba282c1a6c        sameersbn/redis:latest       "/sbin/entrypoint.sh   10 minutes ago      Up 10 minutes       6379/tcp                                           gitlab-redis
ad02f7728e6f        sameersbn/postgresql:9.6-2   "/sbin/entrypoint.sh   10 minutes ago      Up 10 minutes       5432/tcp                                           gitlab-postgresql
70663d33915a        jenkins:latest               "/bin/tini -- /usr/l   25 minutes ago      Up 25 minutes       0.0.0.0:8080->8080/tcp, 0.0.0.0:50000->50000/tcp   myjenkins2

sudo docker kill 9eba282c1a6c
sudo docker kill ad02f7728e6f


sudo docker images

REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
sameersbn/gitlab       9.4.4               e7a05baeb560        5 days ago          1.433 GB
jenkins                latest              de57ef56dca0        2 weeks ago         810 MB
sameersbn/redis        latest              205c287c4c51        3 weeks ago         203.5 MB
sameersbn/postgresql   9.6-2               5b2712a9aac3        6 months ago        234.1 MB

sudo docker stop 70663d33915a #  stop jenkins
sudo docker start 70663d33915a #  stop jenkins
#sudo docker run jenkins #  start jenkins after reboot
#sudo docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins
sudo docker run --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins




sudo apt install docker docker.io

sudo docker run --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins
docker: Error response from daemon: Conflict. The name "/myjenkins" is already in use by container c85279b2a13f6b54b22159a6deffb20a714b555a46b902236e4deb3efdd38820. You have to remove (or rename) that container to be able to reuse that name..

See 'docker run --help'.

sudo docker rm c85279b2a13f6b54b22159a6deffb20a714b555a46b902236e4deb3efdd38820
c85279b2a13f6b54b22159a6deffb20a714b555a46b902236e4deb3efdd38820

e8adcbfa91544678a445ed93dc4d313e
This may also be found at: /var/jenkins_home/secrets/initialAdminPassword


--------------------------------------------------------------------------------

# https://engineering.riotgames.com/news/putting-jenkins-docker-container

docker ps
docker info
docker-machine ip default
docker pull jenkins
docker run -p 8080:8080 --name=jenkins-master jenkin
docker rm jenkins-master
docker run -p 8080:8080 --name=jenkins-master -d jenkins
docker stop jenkins-master
docker rm jenkins-master
docker run -p 8080:8080 --name=jenkins-master -d --env JAVA_OPTS="-Xmx8192m" jenkins
docker run -p 8080:8080 --name=jenkins-master -d --env JAVA_OPTS=”-Xmx8192m -XX:PermSize=256m -XX:MaxPermSize=1024m” jenkins

docker stop jenkins-master
docker rm jenkins-master
docker run -p 8080:8080 --name=jenkins-master -d --env JAVA_OPTS="-Xmx8192m" --env JENKINS_OPTS="--handlerCountStartup=100 --handlerCountMax=300" jenkins

docker build -t myjenkins .
docker run -p 8080:8080 --name=jenkins-master -d --env JAVA_OPTS="-Xmx8192m" --env JENKINS_OPTS="--handlerCountStartup=100 --handlerCountMax=300" myjenkins


docker stop jenkins-master
docker rm jenkins-master
docker run -p 8080:8080 --name=jenkins-master -d myjenkins

docker exec jenkins-master ps -ef | grep java
chown -R  jenkins:jenkins /var/log/jenkins


docker run -p 8080:8080 --name=jenkins-master -d myjenkins
docker exec jenkins-master tail -f /var/log/jenkins/jenkins.lo



docker stop jenkins-master
docker cp jenkins-master:/var/log/jenkins/jenkins.log jenkins.log
cat jenkins.log

--------------------------------------------


# https://issues.jenkins-ci.org/browse/JENKINS-29239?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel

docker run -v /var/run/docker.sock:/var/run/docker.sock -v /bin/docker:/bin/docker \
   -v /usr/lib64/libdevmapper.so.1.02:/usr/lib/libdevmapper.so.1.01 \
   -v /data/jenkins_01/home:/var/jenkins_home -v /tmp:/tmp --env JENKINS_HOME=/data/jenkins_01/home \
   --name jenkins_01 -d myjenkins

   Last line of my Dockerfile:

ENTRYPOINT /usr/local/bin/prepare_jenkins.sh \
  && HOME=$JENKINS_HOME gosu jenkins /bin/tini -- /usr/local/bin/jenkins.sh

prepare_jenkins.sh:

if [[ "${JENKINS_HOME}" !=  "/var/jenkins_home" ]]; then
   mkdir -p $(dirname ${JENKINS_HOME})
   ln -sf -T /var/jenkins_home ${JENKINS_HOME}
fi
grep docker /etc/group || groupadd -g $(stat -c "%g" /var/run/docker.sock) docker
usermod -a -G docker jenkins


-------------------

https://hub.docker.com/r/oreomitch/docker-jenkins-android/builds/bbzobhgnkxz2ntriyb3kvvm/


A Jenkins CI Docker Container
Build
$ docker pull oreomitch/docker-jenkins-android

Usage
To run the container and map the host port 8080 to the container port 8080
$ docker run -d -p 8080:8080 oreomitch/docker-jenkins-android
You can include --name <name> to label the container for example:
$ docker run -d -p 8080:8080 --name myjenkins oreomitch/docker-jenkins-android

By default the container is run as jenkins user. This can be changed at runtime using -u=<user>, e.g:
$ docker run -d -p -u=root 8080:8080 --name myjenkins oreomitch/docker-jenkins-android

To install the Android SDK, run the container as root (see above) and the run the following set of commands:
$ docker exec <container-id> wget --progress=dot:giga http://dl.google.com/android/android-sdk_r23.0.2-linux.tgz
$ docker exec <container-id> mkdir /opt/android
$ docker exec <container-id> tar -C /opt/android -xzvf ./android-sdk_r23.0.2-linux.tgz

To update the Android SDK, tools, build-tools, system-images
$ docker exec <container-id>|<container-name> /bin/sh -c "( sleep 3 && while [ 1 ]; do sleep 1; echo y; done ) | /opt/android/android-sdk-linux/android sdk update --no-ui --all"

The android tools are 32 bit and if you're on 64 bit it will not be able to find them unless you have the 32 bit emulation layers:
$ docker exec <container-id>|<container-name> /bin/sh -c "apt-get install -y lib32stdc++6 lib32z1 libc6-i386"




################################################
#
# Docker Fix: Are you trying to connect to a TLS-enabled daemon without TLS?
#
################################################

https://stackoverflow.com/questions/27528337/am-i-trying-to-connect-to-a-tls-enabled-daemon-without-tls
https://docs.docker.com/engine/userguide/networking/#default-networks

docker logs mysql
FATA[0000] Get http:///var/run/docker.sock/v1.18/containers/mysql/json: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?

# Fix **************************************
sudo apt-get -y install lxc
sudo gpasswd -a ${USER} docker
newgrp docker
sudo service docker restart
#sudo apt-get -y install apparmor cgroup-lite
#sudo service docker restart
# Fix **************************************


Ubuntu packages:
sudo apt-get install apparmor lxc cgroup-lite
A user was added to group docker:
sudo usermod -aG docker ${USER}
# sudo gpasswd -a user docker
Started daemon (openSUSE just needs this)
sudo docker -d
# sudo docker run -i -t ubuntu /bin/bash


service docker start
sudo groupadd docker
sudo chown root:docker /var/run/docker.sock
sudo usermod -a -G docker $USERNAME
