########################################################
#
#   Docker on Debian
#
########################################################

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-debian-9
https://linuxize.com/post/how-to-install-and-use-docker-on-debian-10/
https://www.itzgeek.com/how-tos/linux/debian/how-to-install-docker-on-debian-9.html
https://goneuland.de/debian-10-buster-docker-installieren/
https://www.codeflow.site/de/article/how-to-install-and-use-docker-on-debian-10
https://docs.docker.com/engine/install/debian/

https://hub.docker.com/
https://docs.docker.com/get-started/overview/
https://docs.docker.com/engine/reference/commandline/pull/
https://docs.docker.com/engine/reference/commandline/image_pull/
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
https://github.com/rocker-org/rocker/wiki/How-to-save-data
https://medium.com/@sh.tsang/docker-tutorial-4-exporting-container-and-saving-image-c3a7d792cfb6
https://tuhrig.de/difference-between-save-and-export-in-docker/
https://www.techrepublic.com/article/how-to-commit-changes-to-a-docker-image/
https://linuxconfig.org/docker-container-backup-and-recovery



sudo apt update
sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common

curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
sudo apt update
apt-cache policy docker-ce
sudo apt install docker-ce
sudo systemctl status docker

docker pull ubuntu
docker pull alpine
docker pull debian
docker pull clearlinux

docker ps -a
docker images
sudo docker images --tree
docker ps
docker run -i -t ubuntu /bin/bash -d /home/test

#---------------------------
# Management
#---------------------------
docker ps
docker commit 4a6dc5142337 demos/ubuntucpp
docker commit -p  4a6dc5142337  demos/ubuntucpp2
sha256:c40d63515c2e4d149cf2621dc1fed992e48b1caa6da19f86ff9b4597f7a556a0
#docker push demos/ubuntucpp
docker run -i -t demos/ubuntucpp /bin/bash
sudo docker export c40d63515c2e > /home/export.tar
sudo docker rm <CONTAINER ID>
sudo docker rmi <IMAGE ID>

# import the exported tar ball:
cat /home/export.tar | sudo docker import - ubuntucpp-export:latest

# check the available images
sudo docker images




#---------------------------
# Management
#---------------------------
sudo docker run -itd --name ubuntu ubuntu:1804 /bin/bash
sudo docker exec -it ubuntu bash
sudo docker save ubuntu > ubuntu_save.tar
sudo docker export ubuntu > ubuntu_export.tar
sudo docker stop ubuntu
sudo docker rm ubuntu
sudo docker rmi ubuntu:18.04
sudo docker load < ubuntu_save.tar
cat ubuntu_export.tar | sudo docker import - ubuntu:18.04
sudo docker run -itd --name ubuntu ubuntu:18.04 /bin/bash
sudo docker exec -it ubuntu bash


---------------------------
hub
---------------------------

https://hub.docker.com/_/ubuntu
https://hub.docker.com/_/debian

https://hub.docker.com/_/php
https://hub.docker.com/_/postgres
https://hub.docker.com/_/nginx
https://hub.docker.com/_/mysql
https://hub.docker.com/_/mariadb


docker run -it --rm --name my-running-script -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.4-cli php your-script.php
docker run -d -p 80:80 --name my-apache-php-app -v "$PWD":/var/www/html php:7.2-apache

docker run -d --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -e PGDATA=/var/lib/postgresql/data/pgdata -v /custom/mount:/var/lib/postgresql/data postgres

docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p
docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

docker run -it --network some-network --rm mariadb mysql -hsome-mariadb -uexample-user -p


https://docs.docker.com/docker-hub/official_images/
https://docs.docker.com/engine/install/

------------------------------------
tensorflow in docker
------------------------------------
https://hub.docker.com/r/tensorflow/tensorflow/
https://www.tensorflow.org/install/docker


https://www.tensorflow.org/install
docker run -it --rm tensorflow/tensorflow bash
docker run -it --rm -v $(realpath ~/notebooks):/tf/notebooks -p 8888:8888 tensorflow/tensorflow:latest-jupyter


https://hub.docker.com/r/pytorch/pytorch
https://hub.docker.com/r/pytorch/pytorch-binary-docker-image-ubuntu16.04






docker run -it --rm -v $(realpath ~/notebooks):/tf/notebooks -p 8888:8888 tensorflow/tensorflow:latest-jupyter

sudo sysctl vm.swappiness=10

docker run -it --rm --name my-running-script -v "$PWD":/usr/src/myapp -w /usr/src/myapp php:7.4-cli php your-script.php

docker run -d -p 80:80 --name my-apache-php-app -v "$PWD":/var/www/html php:7.2-apache

docker run -tid -p 8000:80 --name apache_server -v YOUR_HOST_WWW_ROOT:/var/www/html      php:7-apache

docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

docker run --name some-mariadb -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mariadb:tag

https://semaphoreci.com/community/tutorials/dockerizing-a-php-application
https://hub.docker.com/_/php
https://hub.docker.com/_/mariadb
https://hub.docker.com/_/mysql
https://docs.docker.com/compose/install/
https://www.hamrodev.com/en/app-development/lamp-docker-tutorial
https://linuxconfig.org/how-to-create-a-docker-based-lamp-stack-using-docker-compose-on-ubuntu-18-04-bionic-beaver-linux
https://medium.com/@celsocelante/apache-mariadb-php-docker-compose-c19337fe9117
https://dev.mysql.com/doc/mysql-installation-excerpt/8.0/en/docker-mysql-getting-started.html
https://dev.mysql.com/doc/mysql-linuxunix-excerpt/5.6/en/docker-mysql-getting-started.html
https://docs.docker.com/engine/reference/commandline/image_rm/

docker pull mysql/mysql-server:tag
docker run --name=mysql1 -d mysql/mysql-server:tag

docker run --name=mysql1 --restart on-failure -d mysql/mysql-server:8.0
docker run --name=mysql1 --restart on-failure -d mysql/enterprise-server:8.0

docker ps
docker images

docker logs mysql1
docker exec -it mysql1 mysql -uroot -p
mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';
docker stop mysql1
docker start mysql1
docker restart mysql1
docker rm mysql1

docker exec -i some_mysql_container mysql -uroot -ppassword  <<< "select database();"
docker exec -t -i container_mysql_name /bin/bash
docker exec -it container_mysql_name mysql -u username -p
docker exec -t -i container_mysql_name /bin/bash -c "mysql -uroot -proot"
docker exec ${CONTAINER_NAME} mysql -u ${USER_NAME} -p${PASSWORD} -e "drop schema test; create schema test;"
docker run -it --rm mysql mysql -h172.17.0.2 -uroot -pmy-secret-pw -e "show databases;"
docker exec -i _mysql-container-name_ mysql -uroot -proot
docker run -d -p 3306:3306 tutum/mysql
docker exec yourcontainername mysql -u root -p
docker ps

docker run -it --link some-mysql:mysql --rm mysql sh -c 'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR" -P"$MYSQL_PORT_3306_TCP_PORT" -uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'
docker run -it --link <container_name>:<image_name> --rm <image_name> sh -c 'exec mysql -h"<container_ip_address>" -P"<mysql_port_number>" -u"<mysql_username>" -p"<mysql_password>"'
--------------------------------------------
docker run --name=my_mysql_instance -d mysql/mysql-server:latest
docker ps -a
docker exec -it my_mysql_instance mysql -uroot -p
mysql -h localhost -P 3306 -u root
docker inspect my_mysql_instance | grep IPAddress
--------------------------------------------
docker run --rm -dit -e MYSQL_ROOT_PASSWORD=pass --name mysql mysql:5.7
docker logs mysql | tail -n 2
mysql -h172.17.0.2 -uroot -ppass
mysql --version
--------------------------------------------
#########
docker run --rm -dit -e MYSQL_ROOT_PASSWORD=pass --name mysql mysql:5.7
docker exec -t -i mysql /bin/bash
mysql -uroot -ppass
lsof -i :3356
docker logs mysql | tail -n 2
docker inspect mysql | grep Address
--------------------------------------------

docker run --rm -d -e MYSQL_ROOT_PASSWORD=pass --name mysql mysql:5.7
docker run --name mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=pass -d mysql:5.7
docker run -p 3326:3306  --rm -dit -e MYSQL_ROOT_PASSWORD=pass --name mysql mysql:5.7
docker inspect mysql | grep -i ipaddress
grep -i "ready for start up" <(docker logs mysql 2>&1)
mysql -h172.17.0.2 -uroot -ppass
--------------------------------------------
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p
docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p
docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=pass -d mysql:5.7
docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
docker run -it --rm mysql:tag --verbose --help


###########################################
Persistent data in Docker volumes
###########################################

docker run -d -e MYSQL_ROOT_PASSWORD=pass -v /home/docker/mysql-data:/var/lib/mysql --name mysqlserver mysql
docker exec -t -i mysqlserver /bin/bash
docker stop mysqlserver
docker rm mysqlserver
ls /home/docker/mysql-data
docker inspect mysqlserver
docker volume create mysql-data
docker volume create --driver dostorage --name my-volume
docker run -d --volumes-from mydatacontainer mysql
docker volume inspect mydatacontainer

###########################################
Persistent data in Docker volumes for mysql 5.7
###########################################
docker volume ls
docker volume create mysql-data
docker volume inspect mysql-data
docker run --name persistent-mysql -v mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=passwd -d mysql:5.7
# docker start persistent-mysql
docker exec -it persistent-mysql /bin/bash
mysql -h localhost -P 3306 --protocol=tcp -p
passwd
--------------------------------------------
docker images
docker image rm -f mysql
--------------------------------------------

# test SQL
create database testx;
use testx;
# test table
CREATE TABLE guests (
    id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    firstname VARCHAR(30) NOT NULL,
    lastname VARCHAR(30) NOT NULL,
    email VARCHAR(50),
    reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


-h mysql_server_container
-MYSQL_ROOT_PASSWORD: root
-p ports "3306:3306"
-n networks  - net1
-v volumes "./test/mysql_db:/var/lib/mysql:rw"




